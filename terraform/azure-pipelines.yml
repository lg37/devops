# Pipeline pour un cr√©ation RG, vnet, subnet, public IP, NSG, linux VM

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  sarg: 'lg_terraform'
  saname: 'lgterraformsa'
  statecontainer: 'terraform'
  statepath: 'tf.terraform.tfstate'
  truepath: 'terraform'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              script: 'cd $(System.DefaultWorkingDirectory)/$(truepath)/'
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'VisualStudio'
              backendAzureRmResourceGroupName: '$(sarg)'
              backendAzureRmStorageAccountName: '$(saname)'
              backendAzureRmContainerName: '$(statecontainer)'
              backendAzureRmKey: '$(statepath)'
          - task: TerraformTaskV3@3
            displayName: validate
            inputs:
              script: 'cd $(System.DefaultWorkingDirectory)/$(truepath)/'
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              script: 'cd $(System.DefaultWorkingDirectory)/$(truepath)/'
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'VisualStudio'
              backendAzureRmResourceGroupName: '$(sarg)'
              backendAzureRmStorageAccountName: '$(saname)'
              backendAzureRmContainerName: '$(statecontainer)'
              backendAzureRmKey: '$(statepath)'
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              script: 'cd $(System.DefaultWorkingDirectory)/$(truepath)/'
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'VisualStudio'
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              script: 'cd $(System.DefaultWorkingDirectory)/$(truepath)/'
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'VisualStudio'